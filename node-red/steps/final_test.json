[
    {
        "id": "861abc71.70006",
        "type": "tab",
        "label": "Final Test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f185bbb1.f1c948",
        "type": "inject",
        "z": "861abc71.70006",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "38bd8e6.b460872"
            ]
        ]
    },
    {
        "id": "80d5adef.144e",
        "type": "function",
        "z": "861abc71.70006",
        "name": "Declara Count",
        "func": "msg.count = 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 160,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "38bd8e6.b460872",
        "type": "link out",
        "z": "861abc71.70006",
        "name": "",
        "mode": "link",
        "links": [],
        "x": 195,
        "y": 40,
        "wires": []
    },
    {
        "id": "336b4161.37803e",
        "type": "link in",
        "z": "861abc71.70006",
        "name": "",
        "links": [],
        "x": 35,
        "y": 140,
        "wires": [
            [
                "80d5adef.144e"
            ]
        ]
    },
    {
        "id": "9895473.ca21bb8",
        "type": "function",
        "z": "861abc71.70006",
        "name": "L√≥gica",
        "func": "word = {\n    \"one\": \"A\",\n    \"two\": \"C\",\n    \"three\": \"C\",\n    \"four\": \"E\",\n    \"five\": \"N\",\n    \"six\": \"T\",\n    \"seven\": \"U\",\n    \"eight\": \"R\",\n    \"nine\": \"E\"\n}\n\nif (msg.count == 1) {\n    msg.letter = word.one\n} else if (msg.count == 2) {\n    msg.letter = word.two\n} else if (msg.count == 3) {\n    msg.letter = word.three\n} else if (msg.count == 4) {\n    msg.letter = word.four\n} else if (msg.count == 5) {\n    msg.letter = word.five\n} else if (msg.count == 6) {\n    msg.letter = word.six\n} else if (msg.count == 7) {\n    msg.letter = word.seven\n} else if (msg.count == 8) {\n    msg.letter = word.eight\n} else if (msg.count == 9) {\n    msg.letter = word.nine\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "51561ad8.16cf44",
        "type": "debug",
        "z": "861abc71.70006",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "letter",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 60,
        "wires": []
    },
    {
        "id": "cffb512e.786c9",
        "type": "function",
        "z": "861abc71.70006",
        "name": "Soma Count",
        "func": "msg.count += 1\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "eaace8e8.192bf8",
        "type": "trigger",
        "z": "861abc71.70006",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "0.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "24ccfc04.11e1a4",
        "type": "switch",
        "z": "861abc71.70006",
        "name": "",
        "property": "count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "9",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "9",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3096a3fe.bd09ac",
        "type": "function",
        "z": "861abc71.70006",
        "name": "Warn",
        "func": "node.warn(\"Congratulations!\")",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "830f712f.273a7",
        "type": "comment",
        "z": "861abc71.70006",
        "name": "README",
        "info": "Bom... este √© o momento de sabermos o quanto aprendeu! Utilize todo o seu conhecimento e resolva esse problema:\n\n\n - Ligue e ordene os componentes de forma com que a palavra: `Accenture` seja formada na tela de debug (letra ap√≥s letra).\n\n\nDica:\n\n * N√£o √© necess√°rio alterar nenhuma l√≥gica dos componentes.\n\n\n\n\n\nPs.: nesse teste n√≥s temos um n√≥ que n√£o vimos em nenhuma aula üòà! Veremos se consegue utilizar o n√≥ `trigger` da maneira correta...",
        "x": 80,
        "y": 560,
        "wires": []
    },
    {
        "id": "16f325433104e366",
        "type": "comment",
        "z": "861abc71.70006",
        "name": "Resposta",
        "info": "Assim como os desafios anteriores, aqui tamb√©m podemos iniciar da mesma maneira: identificar os pontos de in√≠cio e de fim: `Inject` e `Debug`. Com isto, podemos focar nos demais componentes entre eles.\n\nExiste uma dica escondida logo de cara... temos um n√≥ `Link Out` conectado ao n√≥ `Inject`. Se temos um n√≥ desses, podemos ter a certeza de que teremos que conect√°-lo ao n√≥ `Link In`. Ent√£o j√° podemos editar qualquer um dos dois e selecionar o n√≥ par. Voc√™ saber√° que est√£o devidamente conectados quando clicar em um deles e aparecer uma linha tracejada entre os dois.\n\nAgora, existem duas formas de concluir esse teste: ir ligando todos os componentes e ir testando, na base da tentativa e erro... ou abrir cada n√≥ e entender o que est√£o fazendo. Claro, para essa segunda forma, um pouco de entendimento em JavaScript √© necess√°rio. Independente da sua forma de resolver, eis a sequ√™ncia correta:\n\n`Inject` > `Declara Count` > `L√≥gica` > `switch`\n\nAgora essa √© parte importante. Devemos ligar corretamente as sa√≠das do `switch`, ou ent√£o teremos diversos comportamentos de loop. Essa √© a maneira correta:\n\n`switch sa√≠da 1` > `Soma Count` && `Debug`\n`switch sa√≠da 2` > `Warn` > `Debug`\n\nPerceba que a sa√≠da 1 ligar√° dois n√≥s ao mesmo tempo. E a partir daqui, teremos dois caminhos:\n\nCaminho 1:\n`Soma Count` > `trigger` > `L√≥gica`\n\nCaminho 2:\n`Warn` > `Debug`\n\nTalvez na primeira vez que estiver montando, tenha dificuldades em deixar o espa√ßo \"apresent√°vel\". √â muito comum deixar o ambiente uma bagun√ßa! Mas √© de nossa reponsabilidade que o c√≥digo fique o mais leg√≠vel poss√≠vel.",
        "x": 980,
        "y": 560,
        "wires": []
    }
]